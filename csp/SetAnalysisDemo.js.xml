<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="SetAnalysisDemo.js" application="/csp/setanalysis/" default="1"><![CDATA[
//Define angular modules for our app

var conceptsApp = angular.module('conceptsApp', ['ngResource', 'ngSanitize']);

 conceptsApp.controller('DomainController', ['$scope', 'restFeatures', function($scope, restFeatures) {
	 
	 // initialize ikDomain
	function initDomain() {
		var domain = location.search.substr(1).split('#')[0];
		if (!isNaN(parseInt(domain))) return parseInt(domain);
		var regexp = /^([0-9]+)/;
		var parsed = regexp.exec(domain);
		if (parsed && (parsed.length>0) && !isNaN(parseInt(parsed[0]))) return parsed[0];
		alert('No domain specified in URL!'); 
		return 0;
	}
	$scope.ikDomain = initDomain();
	 
	// retrieve capabilities
   	function getFeatures() {
       tempFeatures = restFeatures.query({domain:$scope.ikDomain},function(data) {
	     $scope.Features = tempFeatures;
	     delete tempFeatures;
       });
   	}
   	getFeatures();
   	
 }]);

 hostURL = function() {
	 return location.href.split('/').slice(0,-1).join('/')+'/saREST/Domain/:domain/';
    };
 
  $('#myTabs a').click(function (e) {
    e.preventDefault();
    $(this).tab('show')
  })
   
 function showModalError(title, part1, part2, part3) {
 	$('#errorModal').find('.modal-title').text(title);
 	$('#errorModal').find('.modal-body-part1').text(part1);
   	$('#errorModal').find('.modal-body-part2').text(part2);
 	$('#errorModal').find('.modal-body-part3').text(part3);
  	$('#errorModal').modal({"backdrop":"static"});
 };
 
 function resourceErrorHandler(response) {
	showModalError('Error',
	               'Status returned : ' + response.status + ' (' + response.statusText + ')',
 				   'REST call       : ' + response.config.url,
				   'Data            : ' + response.data);
 	console.log(response.data);
 };
 
 function resourceSuccessHandler(response) {
	 if (typeof response.data.ErrorMessage != 'undefined') {
		showModalError('Error',
	    	           'Status returned : ' + response.data.ErrorMessage,
 					   'REST call       : ' + response.config.url,
					   '');
 		console.log(response.data);
	 }
 };

function transformResponseHandler(data, header) {
  try {
	  var jsonObject = JSON.parse(data);
	  return jsonObject;
  } catch (e) {
	  if (typeof header.ErrorMessage != 'undefined') {
		 showModalError('Error',
	    	            'Status returned : ' + header.ErrorMessage,
 					    'Received data in console.log (Ctrl Shift J in Chrome)', '');
	 } else {
	  	 showModalError('Error',
	      	         	'Malformed JSON structure : ' + e,
 					 	'Received data in console.log (Ctrl Shift J in Chrome)',	'');
	 }
 	 console.log(data);
  }
  return {};
};


 conceptsApp.factory('restFeatures', function ($resource) {
    return $resource(
		hostURL() + "Features", {}, {
		query: { method: "GET", isArray: false,
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     },
			     transformResponse : transformResponseHandler
			   }
		});
   });
   
 conceptsApp.factory('restEntities', function ($resource) {
    return $resource(
		hostURL() + "Entities", {}, {
		query: { method: "POST", isArray: false,
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     },
			     transformResponse : transformResponseHandler
			   }
		});
   });
   
 conceptsApp.factory('restCRCs', function ($resource) {
    return $resource(
		hostURL() + "CRCs", {}, {
		query: { method: "POST", isArray: false,
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     },
			     transformResponse : transformResponseHandler
			   }
		});
   });
   
 conceptsApp.factory('restSentences', function ($resource) {
    return $resource(
		hostURL() + "Sentences", {}, {
		query: { method: "POST", isArray: false,
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     },
			     transformResponse : transformResponseHandler
			   }
		});
   });
 conceptsApp.factory('restSourcesBySet', function ($resource) {
    return $resource(
		hostURL() + "Sources/Set/:setId", {}, {
		query: { method: "GET", isArray: false,
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     },
			     transformResponse : transformResponseHandler
			   }
		});		
   });
 conceptsApp.factory('restSourcesByOverlap', function ($resource) {
    return $resource(
		hostURL() + "Sources/Set/:setId1/:setId2", {}, {
		query: { method: "GET", isArray: false,
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     },
			     transformResponse : transformResponseHandler
			   }
		});		
   });

 conceptsApp.factory('restSentiment', function ($resource) {
    return $resource(
		hostURL() + "Sentiment", {}, {
		query: { method: "GET", isArray: false,
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     },
			     transformResponse : transformResponseHandler
			   }
		});		
   });

 conceptsApp.factory('restSource', function ($resource) {
    return $resource(
		hostURL() + "Sources/:sourceId", {}, {
		query: { method: "GET", isArray: false,
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     },
			     transformResponse : transformResponseHandler
			   }
		});		
   }); //app.factory 'restSource'

 conceptsApp.factory('restSets', function ($resource) {
    return $resource(
		hostURL() + "Sets/Info", {}, {
		query: { method: "GET", isArray: false,
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     },
			     transformResponse : transformResponseHandler
			   }
		});		
   }); //app.factory 'restSets'

 conceptsApp.factory('restGetOverlap', function ($resource) {
    return $resource(
		hostURL() + "Sets/Overlaps/:setId", {}, {
		query: { method: "GET", isArray: false,
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     },
			     transformResponse : transformResponseHandler
			   }
		});		
   }); //app.factory 'restGetSetOverlap'


 conceptsApp.factory('restSaveSet', function ($resource) {
    return $resource(
		hostURL() + "Sets/Save", {}, {
		update : {method: 'POST',
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     }
			   }
		});
   }); //app.factory 'restSaveSet'

 conceptsApp.factory('restDeleteSet', function ($resource) {
    return $resource(
		hostURL() + "Sets/Delete", {}, {
		update : {method: 'POST',
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     }
			   }
		});
   }); //app.factory 'restDeleteSet'

 conceptsApp.factory('restUpdateSet', function ($resource) {
    return $resource(
		hostURL() + "Sets/Update", {}, {
		update : {method: 'POST',
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     }
			   }
		});
   });
  
 conceptsApp.controller('ConceptsController', ['$scope', '$resource', 'restEntities', 'restSentences', 'restSourcesBySet', 'restSourcesByOverlap', 'restSaveSet', 'restSets', 'restDeleteSet', 'restGetOverlap', 'restUpdateSet', 'restSentiment', 'restSource', 'restCRCs', function($scope, $resource, restEntities, restSentences, restSourcesBySet, restSourcesByOverlap, restSaveSet, restSets, restDeleteSet, restGetOverlap, restUpdateSet, restSentiment, restSource, restCRCs) {
	 
   $scope.getSets = function() {
     $scope.selectedSet = '';
     tempSets = restSets.query({domain:$scope.ikDomain},function(data) {
	     $scope.totalInSets = tempSets.TotalInSets;
	     $scope.totalNotInSets = tempSets.TotalNotInSets;
	     $scope.totalSources = tempSets.TotalSources;
	     $scope.sets = tempSets.Sets;
	     var maxSetSize = 0;
	     for (var i = 0; i < tempSets.Sets.length; i++) {
		     if (maxSetSize < tempSets.Sets[i].Sources) maxSetSize = tempSets.Sets[i].Sources;
	     }
	     $scope.totalSourcesDenominator = (maxSetSize < (0.6 * tempSets.TotalSources)) ? ((maxSetSize > 0) ? (maxSetSize * 1.3) : 1) : tempSets.TotalSources;
	     delete tempSets;
      });
   }

   $scope.editSet= function(set, index) {
	   $scope.SetId = set.SetId;
	   $scope.SetName = set.Name;
	   $scope.SetLogic = set.Logic
	   
	   if ((set.Logic != '') && (set.Logic != null)) {
		 $('#newSetModal').modal();
	   } else {
		 // move all Entities into the Similar table
		 $scope.similar = new Array();
		 for (i in set.Entities) {
			$scope.similar[$scope.similar.length] = { EntityValue: set.Entities[i], selected: 1, canRemove: true }; 
		 }
		 $scope.crcs = new Array();
		 for (i in set.CRCs) {
			$scope.crcs[$scope.crcs.length] = { Value: set.CRCs[i], selected: 1, canRemove: true }; 
		 }
		$('#myTabs li:eq(1) a').tab('show');
	  }
  }
  
  $scope.removeFromSet = function(type, obj) {
	 obj.canRemove = false;
	 obj.selected = 0;
	 req = {'SetId': $scope.SetId, 'Name':$scope.SetName, 'Type':type };
	 if (type == 'entity') {
		 req.Value = obj.EntityValue; 
	 } else {
		 req.Value = obj.Value;
	 }
	 restUpdateSet.update({domain:$scope.ikDomain}, req, function(data) {
		 $scope.getSets();
	 }); 
  }

   $scope.deleteSet= function(set, index) {
	 restDeleteSet.update({domain:$scope.ikDomain}, {'SetId' : set.SetId}, function(data) {
       $scope.getSets();   
     });   
  }
  
  $scope.isSelectedSet = function(set) {
    return (set.SetId == $scope.selectedSet)
  };
  
  $scope.selectSet =  function(set, index) {
	$scope.selectedSet = set.SetId;
	
    $scope.showSourcesBySet(set);
    
    var tempOverlap = restGetOverlap.query({domain:$scope.ikDomain, setId:set.SetId}, function(data) {
     // for each set in overlap, update $scope.sets.Overlap 
     var overlapLength = tempOverlap.Overlaps.length;
     var setLength = $scope.sets.length
     for (var j = 0; j < setLength; j++) {
	    $scope.sets[j].Overlap = '';
	    $scope.sets[j].OverlapSet = '';
	    if ($scope.sets[j].SetId == set.SetId) continue;
	    
	    for (var i = 0; i < overlapLength; i++) {
          if (tempOverlap.Overlaps[i].SetId == $scope.sets[j].SetId) {
	      	$scope.sets[j].Overlap = tempOverlap.Overlaps[i].Count;
	      	$scope.sets[j].OverlapSet = set;
	      }
       }
     }
     delete tempOverlap;
    });
  }
  
  $scope.showSourcesBySet = function(set1, set2) {
    if (set2 == undefined) {
	    $scope.overlapSourcesRole = 'Sources in set \''+set1.Name+'\'';
    	var tempOverlap = restSourcesBySet.query({domain:$scope.ikDomain, setId:set1.SetId }, function(data) {
      		$scope.overlapSources = tempOverlap.Sources;
      		delete tempOverlap;
    	});
    } else {
	    $scope.overlapSourcesRole = 'Overlapping sources for sets \''+set1.Name+'\' and \''+set2.Name+'\'';
    	var tempOverlap = restSourcesByOverlap.query({domain:$scope.ikDomain, setId1:set1.SetId, setId2:set2.SetId }, function(data) {
      		$scope.overlapSources = tempOverlap.Sources;
      		delete tempOverlap;
    	});
    }
  }
  
  $scope.overlapSourcesRole = 'Sources in set';

   $scope.panelVisible = false;
   
   // initial populate of sets tab
   $scope.getSets(); 
   
   
   $scope.clearForm = function() {
     $scope.SetId = '';
     $scope.SetName = '';
   }
   $scope.clearForm();
   
   $scope.refreshConcepts = function() {
	  temp = restEntities.query({domain:$scope.ikDomain}, {filter: $scope.filterSet, blacklists:$scope.selectedBlacklists},function(data) {
      	$scope.concepts = temp.Entities;
	  	delete temp;
      });
      if ($scope.autocomplete) {
	      $scope.getSimilar($scope.autocomplete);
		  $scope.getCRCs($scope.autocomplete);
      }
   }
         
   $scope.getSimilar = function (conceptValue) {
     var temp = restEntities.query({domain:$scope.ikDomain}, {entity:conceptValue, filter:$scope.filterSet, blacklists:$scope.selectedBlacklists}, function(data) {
     	$scope.similar = temp.Entities;
     	delete temp;
     });
   };
   
   $scope.getCRCs = function (entityValue) {
	   var temp = restCRCs.query({domain:$scope.ikDomain}, {entity:entityValue, filter:$scope.filterSet}, function(data) {
		   $scope.crcs = temp.CRCs;
		   delete temp;
	   });
   };
   
   $scope.getSentences = function (type, value) {
     tempSentences = restSentences.query({domain:$scope.ikDomain}, {type:type, value:value, filter:$scope.filterSet}, function(data) {
	     $scope.sentences = tempSentences.Sentences;
	     //delete tempSentences;
     });
   };
   
   $scope.selectConcept = function (concept) {
	 $scope.autocomplete = '';
     $scope.clearForm();
	 $scope.getSimilar(concept.EntityValue);
	 $scope.getCRCs(concept.EntityValue);
	 $scope.getSentences('entity', concept.EntityValue);
   };
  
   $scope.isSelected = function (index, type) {
	   if (type == 'entity') {
	   	   return $scope.similar[index].selected;
	   } else {
		   return $scope.crcs[index].selected;
	   }
   }
   

   $scope.isWarning = function (value) {
   	 return (value>0);
   }

   $scope.selectSimilar = function (concept, index) {
	 if (!$scope.similar[index].canRemove) {
		 // if not in set-editing mode, un/select
		 $scope.similar[index].selected = !$scope.similar[index].selected;
	 }
	 $scope.getSentences('entity', concept.EntityValue);
   };


	$scope.selectCRC = function (crc, index) {
		if (!crc.canRemove) {
			crc.selected = !crc.selected;
		}
		$scope.getSentences('crc', crc.Value);
	};
    
  $scope.exploreKey = function(event) {
	console.log(event);
	if (event && ((event.keyCode==13) || (event.which==13))) {
		$scope.explore();
	}
  }
  
  $scope.toggleBL = function(id) {
	 var index = $scope.selectedBlacklists.indexOf(id);
	 if (index < 0) {
		 $scope.selectedBlacklists.push(id);
	 } else {
		 var x = $scope.selectedBlacklists.slice(0,index);
		 $scope.selectedBlacklists = x.concat($scope.selectedBlacklists.slice(index+1));
	 }
	 console.log(id, $scope.selectedBlacklists);
	 $scope.refreshConcepts();
  }
  $scope.selectedBlacklists = [];
  
  $scope.explore = function() {
	  console.log($scope.autocomplete);
    if (($scope.autocomplete != '') && ($scope.autocomplete.length >= $scope.Features.MinSearchLength)) {
	    $scope.getSimilar($scope.autocomplete);
	    $scope.getCRCs($scope.autocomplete);
    }
  };
  
  
  $scope.saveSet = function(name) {
	var ents = [];
    for (var i in $scope.similar) {
  	  if ($scope.similar[i].selected) {
        ents.push($scope.similar[i].EntityValue);
      }
    }
    var crcs = [];
    for (var i  in $scope.crcs) {
	   if ($scope.crcs[i].selected) {
		    crcs.push($scope.crcs[i].Value);
	   }
    }
    restSaveSet.update({domain:$scope.ikDomain}, {'SetId':$scope.SetId, 'Name':name, 'Entities':ents, 'CRCs':crcs}, function(data) {
      $scope.getSets();   
	});
  }
  
   // initial populate of concepts table
   $scope.refreshConcepts();
   
   
	  
	  $scope.getSentiment = function() {
		  tempSentiment = restSentiment.query({domain:$scope.ikDomain}, function(data) {
			  $scope.sentimentData = tempSentiment.Entities;
			  $scope.hasSentimentData = (tempSentiment.Entities.length>0);
			  delete tempSentiment;
		  });
	  };
	  
	  $scope.getSentiment();
	  
	  this.sortField = 'TotalFrequency';
	  this.reverse = true;
	  
	  this.sort = function (fieldName) {
		  if (this.sortField === fieldName) {
		    this.reverse = !this.reverse;
		  } else {
		    this.sortField = fieldName;
		    this.reverse = (fieldName != 'EntityValue');
		  }
	  };
	  
	  this.isSortUp = function (fieldName) {
		  return this.sortField === fieldName && !this.reverse;
	  };
	         
	  this.isSortDown = function (fieldName) {
		  return this.sortField === fieldName && this.reverse;
	  };
	  
	  this.sentimentClass = function (entity) {
		  if ((entity.TotalNegative==0) && (entity.TotalPositive>0)) { return 'text-success'; }
		  if ((entity.TotalNegative>0) && (entity.TotalPositive>0)) { return 'text-warning'; }
		  if ((entity.TotalNegative>0) && (entity.TotalPositive==0)) { return 'text-danger'; }
		  
		  return '';
	  }
	  
	  $scope.sentFilterAtt = '';
	  $scope.sentenceCriteria = { };
	  
	  $scope.selectSentimentFilter = function (att) {
		  $scope.sentFilterAtt=att;
		  switch (att) {
			  case '': $scope.sentenceCriteria = { }; break;
			  case 'pos': $scope.sentenceCriteria = { HasPositive: 1 }; break;
			  case 'neg': $scope.sentenceCriteria = { HasNegative: 1 }; break;
		  }
	  }
	  
	  $scope.newCompositeSet = function() {
		  $scope.SetId = 0;
		  $scope.SetName = '';
		  $scope.SetLogic = '';
		  $('#newSetModal').modal();
	  }
	  
	  $scope.saveCompositeSet = function() {
		//console.log($scope.SetLogic);
		restSaveSet.update({domain:$scope.ikDomain}, { 'SetId':$scope.SetId, 'Name':$scope.SetName, 'Logic':$scope.SetLogic}, function(data) {
			$('#newSetModal').modal('hide');
			$scope.getSets();   
		});
	  };
	  
	  $scope.selectedSource = "";
	  $scope.selectSource = function(srcId) {
		  tempSrc = restSource.query({domain:$scope.ikDomain, sourceId:srcId}, function(data) {
			  $scope.selectedSource = tempSrc;
			  delete tempSrc;
		  	  $('#fullSourceModal').modal('show');
		  });
	  };
 }]);

 conceptsApp.factory('restSources', function ($resource) {
    return $resource(
		hostURL() + "Sources", {}, {
		query: { method: "GET", isArray: false,
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     },
			     transformResponse : transformResponseHandler
			   }
		});		
   }); //app.factory 'restSources'
   
   
	  
 conceptsApp.controller('SourceController', ['restSources', '$scope', function(restSources, $scope) {
	  
	  this.getSources = function() {
		tempSources = restSources.query({domain:$scope.ikDomain},function(data) {
			  $scope.srcData = tempSources.Sources;
			  // derive metadata from first row
			  $scope.mdData = new Array();
			  for (md in tempSources.Sources[0]) {
				  if ((md!='ID') && (md!='FullText') && (md!='Sets')) {
					  $scope.mdData[$scope.mdData.length] = md;
				  }
			  }
			  delete tempSources;
	  	});
	  }
	  
	  this.getSources();
	  
	  this.sortField = undefined;
	  this.reverse = false;
	  
	  this.sort = function (fieldName) {
		  if (this.sortField === fieldName) {
		    this.reverse = !this.reverse;
		  } else {
		    this.sortField = fieldName;
		    this.reverse = false;
		  }
	  };
	  
	  this.isSortUp = function (fieldName) {
		  return this.sortField === fieldName && !this.reverse;
	  };
	         
	  this.isSortDown = function (fieldName) {
		  return this.sortField === fieldName && this.reverse;
	  };
	  
    
  }]); //app.controller 'sourceController'
]]></CSP>
</Export>
