<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="SetAnalysisDemo.js" application="/csp/setanalysis/" default="1"><![CDATA[
//Define angular modules for our app

var conceptsApp = angular.module('conceptsApp', ['ngResource', 'ngSanitize']);

 conceptsApp.controller('DomainController', ['$scope', function($scope) {
	 
	 // initialize ikDomain
	 if (location.search === '') {
		 alert('No domain specified in URL!');
	 }
	 $scope.ikDomain = location.search.substr(1).split('#')[0];
	 
	 // common functions
   
 }]);

 hostURL = function() {
	var path = location.pathname;  //e.g. /csp/myNamespace/page.csp
	var pathArray = path.split('/');
	pathArray.splice(pathArray.length-1,1);
	var cspPath = pathArray.join('/');
    return "http://"+document.domain+":"+location.port+cspPath+"SetAnalysisDemo/Domain/:domain/"
    };
 
  $('#myTabs a').click(function (e) {
    e.preventDefault();
    $(this).tab('show')
  })
   
 function showModalError(title, part1, part2, part3) {
	 console.log(title + ' - ' + part1);
 	$('#basicModal').find('.modal-title').text(title);
 	$('#basicModal').find('.modal-body-part1').text(part1);
   	$('#basicModal').find('.modal-body-part2').text(part2);
 	$('#basicModal').find('.modal-body-part3').text(part3);
  	$('#basicModal').modal({"backdrop":"static"});
 };
 
 function resourceErrorHandler(response) {
	showModalError('Error',
	               'Status returned : ' + response.status + ' (' + response.statusText + ')',
 				   'REST call       : ' + response.config.url,
				   'Data            : ' + response.data);
 	console.log(response.data);
 };
 
 function resourceSuccessHandler(response) {
	 if (typeof response.data.ErrorMessage != 'undefined') {
		showModalError('Error',
	    	           'Status returned : ' + response.data.ErrorMessage,
 					   'REST call       : ' + response.config.url,
					   '');
 		console.log(response.data);
	 }
 };

function transformResponseHandler(data, header) {
  try {
	  var jsonObject = JSON.parse(data);
	  return jsonObject;
  } catch (e) {
	  if (typeof header.ErrorMessage != 'undefined') {
		 showModalError('Error',
	    	            'Status returned : ' + header.ErrorMessage,
 					    'Received data in console.log (Ctrl Shift J in Chrome)', '');
	 } else {
	  	 showModalError('Error',
	      	         	'Malformed JSON structure : ' + e,
 					 	'Received data in console.log (Ctrl Shift J in Chrome)',	'');
	 }
 	 console.log(data);
  }
  return {};
};


 conceptsApp.factory('restTop', function ($resource) {
    return $resource(
		hostURL() + "Entities?SourceFilter=:sourceFilter", {}, {
		query: { method: "GET", isArray: false,
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     },
			     transformResponse : transformResponseHandler
			   }
		});
   }); //app.factory 'restTop'

 conceptsApp.factory('restSimilar', function ($resource) {
    return $resource(
		hostURL() + "Entities/:entity?SourceFilter=:sourceFilter", {}, {
		query: { method: "GET", isArray: false,
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     },
			     transformResponse : transformResponseHandler
			   }
		});
   }); //app.factory 'restSimilar'

 conceptsApp.factory('restSourcesByEntity', function ($resource) {
    return $resource(
		hostURL() + "Sources/Entity/:entity?SourceFilter=:sourceFilter", {}, {
		query: { method: "GET", isArray: false,
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     },
			     transformResponse : transformResponseHandler
			   }
		});
   });
 conceptsApp.factory('restSourcesBySet', function ($resource) {
    return $resource(
		hostURL() + "Sources/Set/:setId", {}, {
		query: { method: "GET", isArray: false,
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     },
			     transformResponse : transformResponseHandler
			   }
		});		
   });
 conceptsApp.factory('restSourcesByOverlap', function ($resource) {
    return $resource(
		hostURL() + "Sources/Set/:setId1/:setId2", {}, {
		query: { method: "GET", isArray: false,
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     },
			     transformResponse : transformResponseHandler
			   }
		});		
   });

 conceptsApp.factory('restSets', function ($resource) {
    return $resource(
		hostURL() + "Sets/Info", {}, {
		query: { method: "GET", isArray: false,
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     },
			     transformResponse : transformResponseHandler
			   }
		});		
   }); //app.factory 'restSets'

 conceptsApp.factory('restGetOverlap', function ($resource) {
    return $resource(
		hostURL() + "Sets/Overlaps/:setId", {}, {
		query: { method: "GET", isArray: false,
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     },
			     transformResponse : transformResponseHandler
			   }
		});		
   }); //app.factory 'restGetSetOverlap'


 conceptsApp.factory('restSaveSet', function ($resource) {
    return $resource(
		hostURL() + "Sets/Save", {}, {
		update : {method: 'POST',
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     }
			   }
		});
   }); //app.factory 'restSaveSet'

 conceptsApp.factory('restDeleteSet', function ($resource) {
    return $resource(
		hostURL() + "Sets/Delete", {}, {
		update : {method: 'POST',
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     }
			   }
		});
   }); //app.factory 'restDeleteSet'

 conceptsApp.factory('restUpdateSet', function ($resource) {
    return $resource(
		hostURL() + "Sets/RemoveEntity", {}, {
		update : {method: 'POST',
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     }
			   }
		});
   });
  
 conceptsApp.controller('ConceptsController', ['$scope', '$resource', 'restTop', 'restSimilar', 'restSourcesByEntity', 'restSourcesBySet', 'restSourcesByOverlap', 'restSaveSet', 'restSets', 'restDeleteSet', 'restGetOverlap', 'restUpdateSet', function($scope, $resource, restTop, restSimilar, restSourcesByEntity, restSourcesBySet, restSourcesByOverlap, restSaveSet, restSets, restDeleteSet, restGetOverlap, restUpdateSet) {
	 
   $scope.getSets = function() {
     $scope.selectedSet = '';
     tempSets = restSets.query({domain:$scope.ikDomain},function(data) {
	     $scope.totalInSets = tempSets.TotalInSets;
	     $scope.totalNotInSets = tempSets.TotalNotInSets;
	     $scope.totalSources = tempSets.TotalSources;
	     $scope.sets = tempSets.Sets;
	     delete tempSets;
      });
   }

   $scope.editSet= function(set, index) {
	 $scope.SetName = set.Name;
	 $scope.SetId = set.SetId;
	 
	 // move all Entities into the Similar table
	 $scope.similar = new Array();
	 for (i in set.Entities) {
		$scope.similar[$scope.similar.length] = { EntityValue: set.Entities[i], selected: 1, canRemove: true }; 
	 }
	$('#myTabs li:eq(1) a').tab('show');   
  }
  
  $scope.removeEntityFromSet = function(entity) {
	 entity.canRemove = false;
	 entity.selected = 0;
	 restUpdateSet.update({domain:$scope.ikDomain}, {'SetId': $scope.SetId, 'Name':$scope.SetName, 'RemoveEntity':entity.EntityValue }, function(data) {
		 $scope.getSets();
	 }); 
  }

   $scope.deleteSet= function(set, index) {
	 restDeleteSet.update({domain:$scope.ikDomain}, {'SetId' : set.SetId}, function(data) {
       $scope.getSets();   
     });   
  }
  
  $scope.isSelectedSet = function(set) {
    return (set.SetId == $scope.selectedSet)
  };
  
  $scope.selectSet =  function(set, index) {
	$scope.selectedSet = set.SetId;
	
    $scope.showSourcesBySet(set);
    
    var tempOverlap = restGetOverlap.query({domain:$scope.ikDomain, setId:set.SetId}, function(data) {
     // for each set in overlap, update $scope.sets.Overlap 
     var overlapLength = tempOverlap.Overlaps.length;
     var setLength = $scope.sets.length
     for (var j = 0; j < setLength; j++) {
	    $scope.sets[j].Overlap = '';
	    $scope.sets[j].OverlapSet = '';
	    if ($scope.sets[j].SetId == set.SetId) continue;
	    
	    for (var i = 0; i < overlapLength; i++) {
          if (tempOverlap.Overlaps[i].SetId == $scope.sets[j].SetId) {
	      	$scope.sets[j].Overlap = tempOverlap.Overlaps[i].Count;
	      	$scope.sets[j].OverlapSet = set;
	      }
       }
     }
     delete tempOverlap;
    });
  }
  
  $scope.showSourcesBySet = function(set1, set2) {
    if (set2 == undefined) {
	    $scope.overlapSourcesRole = 'Sources in set \''+set1.Name+'\'';
    	var tempOverlap = restSourcesBySet.query({domain:$scope.ikDomain, setId:set1.SetId }, function(data) {
      		$scope.overlapSources = tempOverlap.Sources;
      		delete tempOverlap;
    	});
    } else {
	    $scope.overlapSourcesRole = 'Overlapping sources for sets \''+set1.Name+'\' and \''+set2.Name+'\'';
    	var tempOverlap = restSourcesByOverlap.query({domain:$scope.ikDomain, setId1:set1.SetId, setId2:set2.SetId }, function(data) {
      		$scope.overlapSources = tempOverlap.Sources;
      		delete tempOverlap;
    	});
    }
  }
  
  $scope.overlapSourcesRole = 'Sources in set';

   $scope.panelVisible = false;
   
   // initial populate of sets tab
   $scope.getSets(); 
   
   
   $scope.clearForm = function() {
     $scope.SetId = '';
     $scope.SetName = '';
   }
   $scope.clearForm();
   
   $scope.refreshConcepts = function() {
	  temp = restTop.query({domain:$scope.ikDomain, sourceFilter:$scope.onlyUnknown?1:0},function(data) {
      	$scope.concepts = temp.Entities;
	  	delete temp;
      });
   }
         
   $scope.getSimilar = function (conceptValue) {
     //todo: when using encodeURIComponent, also need to decode in handler
     var temp = restSimilar.query({domain:$scope.ikDomain, entity:conceptValue, sourceFilter:$scope.onlyUnknown?1:0},function(data) {
     	$scope.similar = temp.Entities;
     	delete temp;
     });
   };
   
   $scope.selectConcept = function (concept) {
	 $scope.autocomplete = '';
     $scope.clearForm();
	 $scope.getSimilar(concept.EntityValue);
     tempSources = restSourcesByEntity.query({domain:$scope.ikDomain, entity:concept.EntityValue},function(data) {
	     $scope.sources = tempSources.Sources;
	     delete tempSources;
     });
   };
  
   $scope.isSelected = function (index) {
   	 return $scope.similar[index].selected;
   }
   

   $scope.isWarning = function (value) {
   	 return (value>0);
   }

   $scope.selectSimilar = function (concept, index) {
	 if (!$scope.similar[index].canRemove) {
		 // if not in set-editing mode, un/select
		 $scope.similar[index].selected = !$scope.similar[index].selected;
	 }
     tempSources = restSourcesByEntity.query({domain:$scope.ikDomain, entity:concept.EntityValue},function(data) {
	     $scope.sources = tempSources.Sources;
	     delete tempSources;
     });
   };

    
  
  $scope.getAutocomplete = function(ikDomain) {
    if (($scope.autocomplete != '') && ($scope.autocomplete.length > 2)) {
	    $scope.getSimilar($scope.autocomplete);
    }
  };
  
  
  $scope.saveSet = function(name) {
	var arraySelected = [];
	var arrayLength = $scope.similar.length;
    for (var i = 0; i < arrayLength; i++) {
  	  if ($scope.similar[i].selected) {
        arraySelected.push($scope.similar[i].EntityValue);
      }
    }
    restSaveSet.update({domain:$scope.ikDomain}, {'SetId':$scope.SetId, 'Name':name, 'Entities':arraySelected}, function(data) {
      $scope.getSets();   
	});
  }
  
   // initial populate of concepts table
   $scope.refreshConcepts();
   
 }]);

 conceptsApp.factory('restSources', function ($resource) {
    return $resource(
		hostURL() + "Sources", {}, {
		query: { method: "GET", isArray: false,
		         interceptor : {
					response : resourceSuccessHandler,
			        responseError : resourceErrorHandler
			     },
			     transformResponse : transformResponseHandler
			   }
		});		
   }); //app.factory 'restSources'
   
   
	  
 conceptsApp.controller('SourceController', ['restSources', '$scope', function(restSources, $scope) {
	  
	  this.getSources = function() {
		tempSources = restSources.query({domain:$scope.ikDomain},function(data) {
			  $scope.srcData = tempSources.Sources;
			  // derive metadata from first row
			  $scope.mdData = new Array();
			  for (md in tempSources.Sources[0]) {
				  if ((md!='ID') && (md!='FullText') && (md!='Sets')) {
					  $scope.mdData[$scope.mdData.length] = md;
				  }
			  }
			  delete tempSources;
	  	});
	  }
	  
	  this.getSources();
	  
	  this.sortField = undefined;
	  this.reverse = false;
	  
	  this.sort = function (fieldName) {
		  if (this.sortField === fieldName) {
		    this.reverse = !this.reverse;
		  } else {
		    this.sortField = fieldName;
		    this.reverse = false;
		  }
	  };
	  
	  this.isSortUp = function (fieldName) {
		  return this.sortField === fieldName && !this.reverse;
	  };
	         
	  this.isSortDown = function (fieldName) {
		  return this.sortField === fieldName && this.reverse;
	  };
    
  }]); //app.controller 'sourceController'
]]></CSP>
</Export>
